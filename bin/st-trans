#!/bin/bash

# Selected text translator by ibrahim mohammad
# Email: ibrahim.mohammad.2015@gmail.com
# GitHub repository: https://github.com/IbrahimMohammad/st-trans
# No Rights Reserved

help ()
{
    echo -e "Usage: st-trans [<OPTIONS>|<[SOURCE]:[TARGET]>]

Options:
    -l\t\tshow a list of supported languages and codes.

    -k\t\tchange shortcut key.

    -h\t\tprint this help and exit.

    -t\t\tspecifies the timeout in seconds at which to expire the translator notifications.

    -u\t\tspecifies translator notifications urgency level (low, normal, critical) in integers (0, 1, 2) respectively.

    -v\t\tinvert source language with target language. note: you can't use this option when source language set to auto.

    -i\t\trun st-trans in instant translation mode, translate selection instantly or when shortcut key pressed.

    -c\t\trun st-trans in command mode only (deactivate instant translation mode), translate selection when shortcut key pressed (defalt mode).

Language preferences
[SOURCE]:[TARGET]
To change source and target language use
SOURCE-CODE:TARGET-CODE
For example to translate from English to French use this command
st-trans en:fr

Also you can change just one language either source by
SOURCE:
For example
st-trans en:
or target
:TARGET
For example
st-trans :fr
You can use auto as the source language to auto detect source language
st-trans auto:"
}

adjust_body()
{
    if [[ $1 = start_test ]]; then
        # wait untill Notification server start or a minute passed
        declare -i i=0
        while ! dbus-send --session --dest=org.freedesktop.DBus --type=method_call --print-reply \
            /org/freedesktop/DBus org.freedesktop.DBus.ListNames | grep -qF 'org.freedesktop.Notifications' && [[ $i != 12 ]]; do
            sleep 5
            i+=1
        done
    fi
    # if the current notification server allow hyperlinks
    if dbus-send --session --dest=org.freedesktop.Notifications --type=method_call --print-reply \
        /org/freedesktop/Notifications org.freedesktop.Notifications.GetCapabilities | grep -qF 'hyperlink'; then
        body=\"\$hyper\"
    else
        body=\"\$required\"
    fi
}

default_conf()
{
    echo "key=\"trnsl.1.1.20151126T100621Z.111380f547c17fd9.6b59d2581e2f22b5baabfdc9f1faa22b8a091198\"
source=\"en\"
target=\"ar\"
urgency=\"normal\"
timeout=\"7000\"" > $conf
    adjust_body && echo "body="$body"" >> $conf
    # shortcut keys
    if ! grep -qF 'st-trans' ~/.xbindkeysrc &> /dev/null; then
        echo "\"st-trans\"
Alt + t
\"st-trans -v\"
Alt + v" >> ~/.xbindkeysrc
        # update xbindkeys to use the new shortcut key
        xbindkeys
    fi
}

write_conf()
{
    echo "key=\"$key\"
source=\"$source\"
target=\"$target\"
urgency=\"$urgency\"
timeout=\"$timeout\"
body="$body"" > $conf
}

translate()
{
    text="$(xsel -o)"
    translation="$(wget -U "Mozilla/5.0" -qO - "https://translate.yandex.net/api/v1.5/tr.json/translate?key=$key&text=$text&lang=$source-$target" | cut -d '"' -f 10)"
    # send notification
    notify-send -u $urgency -t $timeout "$text" "$translation\n$body"
}


# here we go!
conf=~/.st-transrc
required="Powered by Yandex.Translate"
hyper="Translate on  \<a href\=\"https://translate.google.com/#$source/$target/$text\"\>Google\<\/a\>  \<a href\=\"https://www.bing.com/translator/?text=$text&amp;from=$source&amp;to=$target\"\>Bing\<\/a\>\n\<a href\=\"http://translate.yandex.com/\"\>$required\<\/a\>"
if [ -e $conf ]; then
    source $conf
else
    default_conf
    source $conf
fi

if ! [ -n "$1" ]; then
    translate
else # options
    # print languages table
    if [ "$1" == "-l" ]; then
        echo "┌──────────────────────┬───────────────────────┐
│Language Name    Code │Language Name     Code │
│──────────────────────│───────────────────────│
│ Afrikaans      - af  │ Kazakh          - kk  │
│ Albanian       - sq  │ Kirghiz         - ky  │
│ Arabic         - ar  │ Korean          - ko  │
│ Armenian       - hy  │ Latin           - la  │
│ Azerbaijani    - az  │ Latvian         - lv  │
│ Bashkir        - ba  │ Lithuanian      - lt  │
│ Basque         - eu  │ Macedonian      - mk  │
│ Belarusian     - be  │ Malagasy        - mg  │
│ Bosnian        - bs  │ Malay           - ms  │
│ Bulgarian      - bg  │ Maltese         - mt  │
│ Catalan        - ca  │ Mongolian       - mn  │
│ Chinese        - zh  │ Norwegian       - no  │
│ Croatian       - hr  │ Persian         - fa  │
│ Czech          - cs  │ Polish          - pl  │
│ Danish         - da  │ Portuguese      - pt  │
│ Dutch          - nl  │ Romanian        - ro  │
│ English        - en  │ Russian         - ru  │
│ Estonian       - et  │ Serbian         - sr  │
│ Finnish        - fi  │ Slovak          - sk  │
│ French         - fr  │ Slovenian       - sl  │
│ Galician       - gl  │ Spanish         - es  │
│ Georgian       - ka  │ Swahili         - sw  │
│ German         - de  │ Swedish         - sv  │
│ Greek          - el  │ Tagalog         - tl  │
│ Haitian        - ht  │ Tajik           - tg  │
│ Hebrew         - he  │ Tatar           - tt  │
│ Hungarian      - hu  │ Thai            - th  │
│ Icelandic      - is  │ Turkish         - tr  │
│ Indonesian     - id  │ Ukrainian       - uk  │
│ Irish          - ga  │ Uzbek           - uz  │
│ Italian        - it  │ Vietnamese      - vi  │
│ Japanese       - ja  │ Welsh           - cy  │
└──────────────────────┴───────────────────────┘"
    # auto adjust translation view
    elif [ "$1" == "-a" ]; then
        if [[ $2 = start_test ]]; then
            adjust_body start_test
        else
            adjust_body
        fi && write_conf
    # change languages
    elif echo "$1" | grep -qF ':'; then
        curr_source_lang="$(cut -sd \& -f 2 ~/.st-trans)"
        curr_target_lang="$(cut -sd \& -f 3 ~/.st-trans)"
        new_source_lang="$(echo "$1" | cut -sd \: -f 1)"
        new_target_lang="$(echo "$1" | cut -sd \: -f 2)"
        # is there are a source language?
		if [ -n "$new_source_lang" ]; then
            # check language code
            if ! grep -q "\- $new_source_lang " /usr/bin/st-trans  &&  [ "$new_source_lang" != "auto" ]; then
                    echo "\"$new_source_lang\" isn't a supported language code. please take a look at language table with st-trans -l"
                    exit 1
            fi
            # change source language
            sed -i "s/$curr_source_lang/sl=$new_source_lang/" ~/.st-trans
		fi
        # is there are a target language?
        if [ -n "$new_target_lang" ]; then
            # check language code
            if ! grep -q "\- $new_target_lang " /usr/bin/st-trans  ; then
                echo "\"$new_target_lang\" isn't a supported language code. please take a look at supported language table with st-trans -l"
                exit 1
            fi
            # change target language
            sed -i "s/$curr_target_lang/tl=$new_target_lang/" ~/.st-trans
		fi
    # change shortcut key
    elif [ "$1" == "-k" ]; then
        echo "Please press combination of keys to set your new shortcut key"
        new_key="$(xbindkeys -k | sed -n '$p')"
        # check if user enter new shortcut key
        if [ "$new_key" == 'in $HOME/.xbindkeysrc to bind a key.' ]; then
            echo "nothing change"
        else
            curr_key="$(sed -n '/\~\/\.st-trans/{n;p;}' ~/.xbindkeysrc)"
            sed -i "s/$curr_key/$new_key/" ~/.xbindkeysrc
            xbindkeys
        fi	
    # invert source language with target language
    elif [ "$1" == "-v" ]; then
        curr_source_lang_code="$(cut -sd \& -f 2 ~/.st-trans | cut -sd \= -f 2)" # only language code without "sl="
        if [ "$curr_source_lang_code" == "auto" ]; then
            notify-send -t 0 -u critical "Source language set to auto so i can't invert it." "Please change source language to any supported language so i can invert it for you."
            exit 1
        fi
        curr_target_lang_code="$(cut -sd \& -f 3 ~/.st-trans | cut -sd \= -f 2)" # only language code without "tl="
        # invert
        sed -i -e "s/sl=$curr_source_lang_code/sl=$curr_target_lang_code/" -e "s/tl=$curr_target_lang_code/tl=$curr_source_lang_code/" ~/.st-trans
    # change timeout period
    elif [ "$1" == "-t" ]; then
        # ensure that $2 exist
        if ! [ -n "$2" ]; then
            help
            exit 1
        fi
        # check that $2 is integer
        if ! [ "$2" -eq "$2" ] &> /dev/null; then
            echo 'Sorry integers only.'
            exit 1
        fi
        curr_timeout=$(tail -n 1 ~/.st-trans | cut -sd ' ' -f 5)
        new_timeout=$(($2*1000))
        sed -i "s/$curr_timeout/$new_timeout/" ~/.st-trans
    # change urgency level:
    elif [ "$1" == "-u" ]; then
		# ensure that $2 exist
        if ! [ -n "$2" ]; then
            help
            exit 1
        fi
		# check that $2 is integer
        if ! [ "$2" -eq "$2" ] &> /dev/null; then
            echo "Sorry integers only"
            exit 1
        fi
        case $2 in
            0)  new_level='low'
                ;;
            1)  new_level='normal'
                ;;
            2)  new_level='critical'
                ;;
            *)  echo "invalid number."
                help
                exit 1
                ;;
        esac
        curr_level=$(tail -n 1 ~/.st-trans | cut -sd ' ' -f 3)
        sed -i "s/$curr_level/$new_level/" ~/.st-trans
    # instant translation mode
    elif [ "$1" == "-i" ]; then
        # check if the daemon already running if not run it
        if pgrep -l st-trans-daemon &> /dev/null; then
	        echo 'Instant translation mode already running.'
	    else
	        setsid st-trans-daemon < /dev/null &> /dev/null&
            echo 'Instant translation mode activated.'
	    fi
    # command mode only
    elif [ "$1" == "-c" ]; then
        if killall st-trans-daemon &> /dev/null; then
	        echo 'Instant translation mode deactivated.'
	    else
	        echo 'Instant translation mode already deactivated.'
	    fi
    # show help option
    elif [ "$1" == "-h" ]; then
        help
    # more options with elif
    else
        help
        exit 1
    fi
fi
